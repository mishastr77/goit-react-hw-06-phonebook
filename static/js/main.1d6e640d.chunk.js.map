{"version":3,"sources":["Components/Form/form.module.css","Components/Filter/filter.module.css","Components/Container/container.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","Components/Container/Container.js","Components/Section/Section.js","Components/Form/Form.js","Components/ContactsList/ContactsList.js","Components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","contactsAction","contactAdd","createAction","name","number","payload","id","shortid","generate","contactDelete","filterChange","items","createReducer","initialContacts","actions","state","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistorAndStore","persistor","persistStore","Container","children","className","styles","container","Section","title","Form","props","handleChange","e","currentTarget","value","setState","addNoRepeatContact","some","toLowerCase","alert","onSubmit","reset","handleSubmit","preventDefault","inputNameId","inputNumberId","this","htmlFor","inputForm","type","onChange","pattern","required","buttonForm","Component","defaultProps","connect","dispatch","contactAction","normalizedFilter","contact","includes","getVisibleContacts","onDeleteContact","contactId","map","onClick","onChangeFilter","target","filterLabel","filterInput","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.1d6e640d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputForm\":\"form_inputForm__kGrRV\",\"buttonForm\":\"form_buttonForm__2D0RZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"filter_filterLabel__3X-su\",\"filterInput\":\"filter_filterInput__3Nl3a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container_container__1Sjfe\"};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport shortid from \"shortid\";\r\n\r\nconst contactAdd = createAction(\"contacts/add\", ({ name, number }) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\n/* const contactAdd = ({ name, number }) => ({\r\n  type: types.ADD,\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}); */\r\n\r\nconst contactDelete = createAction(\"contacts/delete\");\r\n\r\n/* const contactDelete = (contactId) => ({\r\n  type: types.DELETE,\r\n  payload: contactId,\r\n}); */\r\n\r\nconst filterChange = createAction(\"contacts/filterChange\");\r\n\r\n/* const filterChange = (value) => ({\r\n  type: types.FILTER_CHANGE,\r\n  payload: value,\r\n}); */\r\nconst contactsAction = { contactAdd, contactDelete, filterChange };\r\n\r\nexport default contactsAction;\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./contacts-actions\";\r\nimport initialContacts from \"../../Data/initialContacts.json\";\r\n\r\nconst items = createReducer(initialContacts, {\r\n  [actions.contactAdd]: (state, { payload }) => [payload, ...state],\r\n  [actions.contactDelete]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.filterChange]: (_, { payload }) => payload,\r\n});\r\n\r\n/* const items = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case types.ADD:\r\n      return [...state, payload];\r\n\r\n    case types.DELETE:\r\n      return state.filter(({ id }) => id !== payload);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}; */\r\n\r\n/* const filter = (state = \"\", { type, payload }) => {\r\n  switch (type) {\r\n    case types.FILTER_CHANGE:\r\n      return payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}; */\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst persistorAndStore = { store, persistor };\r\n\r\nexport default persistorAndStore;\r\n","import React from \"react\";\nimport styles from \"./container.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst Container = ({ children }) => (\n  <div className={styles.container}>{children}</div>\n);\n\nexport default Container;\n\nContainer.propTypes = {\n  children: PropTypes.array.isRequired,\n};\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./section.module.css\";\r\n\r\nconst Section = ({ children, title }) => {\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.object.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Section from \"../Section\";\nimport shortid from \"shortid\";\nimport styles from \"./form.module.css\";\nimport { connect } from \"react-redux\";\nimport contactAction from \"../../redux/contacts/contacts-actions\";\n\nclass Form extends Component {\n  static defaultProps = {\n    name: \"\",\n    number: \"\",\n  };\n\n  static propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.string,\n  };\n\n  state = {\n    name: this.props.name,\n    number: this.props.number,\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  addNoRepeatContact = (state, contacts) => {\n    const { name, number } = state;\n    if (\n      contacts.some(\n        (contacts) => contacts.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    if (contacts.some((contacts) => contacts.number === number)) {\n      alert(`${number} is already in contacts`);\n      return;\n    }\n\n    this.props.onSubmit(state);\n    this.reset();\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { contacts } = this.props;\n    this.addNoRepeatContact(this.state, contacts);\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  inputNameId = shortid.generate();\n  inputNumberId = shortid.generate();\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <Section title=\"Phonebook\">\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor={this.inputNameId}>\n            Name\n            <input\n              className={styles.inputForm}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={this.handleChange}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              required\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              id={this.inputNameId}\n            />\n          </label>\n          <label htmlFor={this.inputNumberId}>\n            Number\n            <input\n              className={styles.inputForm}\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={this.handleChange}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              required\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              id={this.inputNumberId}\n            />\n          </label>\n          <button className={styles.buttonForm} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </Section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: (name, number) => dispatch(contactAction.contactAdd(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./contactsList.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport contactAction from \"../../redux/contacts/contacts-actions\";\r\n\r\nconst ContactsList = ({ contacts, onDeleteContact }) => (\r\n  <ul>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li key={id}>\r\n        <p>\r\n          {name}: {number}\r\n        </p>\r\n        <button type=\"button\" onClick={() => onDeleteContact(id)}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nconst getVisibleContacts = (contacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(\r\n    (contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter) ||\r\n      contact.number.includes(filter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { filter, items } = state.contacts;\r\n  const visibleContacts = getVisibleContacts(items, filter);\r\n\r\n  return {\r\n    contacts: visibleContacts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (contactId) =>\r\n    dispatch(contactAction.contactDelete(contactId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./filter.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport contactAction from \"../../redux/contacts/contacts-actions\";\r\n\r\nconst Filter = ({ filter, onChangeFilter }) => (\r\n  <label className={styles.filterLabel}>\r\n    Find contacts by name and number\r\n    <input\r\n      className={styles.filterInput}\r\n      type=\"text\"\r\n      value={filter}\r\n      onChange={onChangeFilter}\r\n    />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onChangeFilter: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: state.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChangeFilter: (e) => dispatch(contactAction.filterChange(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from \"react\";\nimport Container from \"./Components/Container\";\nimport Form from \"./Components/Form\";\nimport ContactsList from \"./Components/ContactsList\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Filter from \"./Components/Filter\";\n\nclass App extends Component {\n  static propTypes = {\n    contacts: PropTypes.array,\n    filter: PropTypes.string,\n  };\n\n  render() {\n    return (\n      <Container>\n        <Form />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactsList />\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.items,\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}